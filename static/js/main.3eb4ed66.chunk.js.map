{"version":3,"sources":["component/Common.jsx","List.jsx","Reudx/actionCreater.js","Reudx/action.js","App.js","serviceWorker.js","Reudx/reducer.js","index.js"],"names":["Common","props","id","item","name","del","className","Grid","xs","key","Button","variant","color","onClick","List","todo","useSelector","state","Todo","goal","Goal","dispatch","useDispatch","e","title","type","del_goal","container","spacing","map","x","index","Item","App","add","preventDefault","target","addTodo","value","addGoal","document","getElementById","onSubmit","required","autoComplete","Component","connect","add_todo","add_goal","Boolean","window","location","hostname","match","initialTodoState","initialGaolState","rootReducer","combineReducers","action","filter","store","createStore","composeWithDevTools","applyMiddleware","logger","console","log","getState","subscribe","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3eb4ed66.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nconst Common = (props) => {\r\n  const { id, item, name, del } = props;\r\n  return (\r\n    <div className=\"common-part\">\r\n      <Grid item xs={12} key={id} className=\"common\">\r\n        <Grid item xs={10}>\r\n          <h2>{item}</h2>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            onClick={() => del(id, name)}\r\n            className=\"dlt-btn\"\r\n          >\r\n            Del\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Common;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { del_todo, del_goal } from \"./Reudx/actionCreater\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Common from \"./component/Common\";\r\n\r\nconst List = () => {\r\n  const todo = useSelector((state) => state.Todo.todo);\r\n  const goal = useSelector((state) => state.Goal.goal);\r\n  const dispatch = useDispatch();\r\n\r\n  const del = (e, title) => {\r\n    if (title === \"Todo\") return dispatch(del_todo(e));\r\n    return dispatch(del_goal(e));\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={3} className=\"list\">\r\n      <Grid item xs={6}>\r\n        <h1>Todo</h1>\r\n        <div className=\"toal\">\r\n          {todo.map((x, index) => {\r\n            return (\r\n              <Common\r\n                del={del}\r\n                id={x.id}\r\n                item={x.todo}\r\n                name=\"Todo\"\r\n                key={x.id}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <h1>Goal</h1>\r\n        <div>\r\n          {goal.map((x) => {\r\n            return (\r\n              <Common\r\n                del={del}\r\n                id={x.id}\r\n                item={x.goal}\r\n                name=\"goal\"\r\n                key={x.id}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nexport default List;\r\n","import { ADD_TODO, DEL_TODO, ADD_GOAL, DEL_GOAL } from \"./action\";\r\n\r\nexport const add_todo = (todo) => {\r\n  return {\r\n    type: ADD_TODO,\r\n    todo: todo,\r\n  };\r\n};\r\n\r\nexport const del_todo = (id) => {\r\n  return {\r\n    type: DEL_TODO,\r\n    id: id,\r\n  };\r\n};\r\n\r\nexport const add_goal = (goal) => {\r\n  return {\r\n    type: ADD_GOAL,\r\n    goal: goal,\r\n  };\r\n};\r\n\r\nexport const del_goal = (id) => {\r\n  return {\r\n    type: DEL_GOAL,\r\n    id: id,\r\n  };\r\n};\r\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport const DEL_TODO = \"DEL_TODO\";\r\n\r\nexport const ADD_GOAL = \"ADD_GOAL\";\r\nexport const DEL_GOAL = \"DEL_GOAL\";\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { connect } from \"react-redux\";\nimport { add_todo, add_goal } from \"./Reudx/actionCreater\";\nimport List from \"./List\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { Button } from \"@material-ui/core\";\n\nconst Item = [\"todo\", \"goal\"];\n\nclass App extends Component {\n  add = (e) => {\n    e.preventDefault();\n    if (e.target.todo) {\n      this.props.addTodo(e.target.todo.value);\n    } else {\n      this.props.addGoal(e.target.goal.value);\n    }\n    document.getElementById(\"empty\").value = \"\";\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Grid container>\n          <Grid item xs={12}>\n            <h1>Created With Redux</h1>\n          </Grid>\n        </Grid>\n        <div>\n          <Grid container spacing={3} className=\"search-container\">\n            {Item.map((item, index) => {\n              return (\n                <Grid item xs={6} key={index}>\n                  <form onSubmit={(e) => this.add(e)} className=\"form\">\n                    <input\n                      type=\"text\"\n                      name={item}\n                      required\n                      autoComplete=\"off\"\n                      id=\"empty\"\n                    />\n                    <Button color=\"primary\" variant=\"contained\" type=\"submit\">\n                      {`Add ${item}`}\n                    </Button>\n                  </form>\n                </Grid>\n              );\n            })}\n          </Grid>\n          <List />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst MapStateToProps = (state) => {\n  return {\n    Todo: state.Todo.todo,\n    Goal: state.Goal.goal,\n  };\n};\n\nconst MapDispatchToProps = (dispatch) => {\n  return {\n    addTodo: (todo) => dispatch(add_todo(todo)),\n    addGoal: (goal) => dispatch(add_goal(goal)),\n  };\n};\n\nexport default connect(MapStateToProps, MapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ADD_TODO, DEL_TODO, ADD_GOAL, DEL_GOAL } from \"./action\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst initialTodoState = {\r\n  todo: [],\r\n  id: 0,\r\n};\r\n\r\nexport const todoReducer = (state = initialTodoState, action) => {\r\n  if (action.type === ADD_TODO) {\r\n    return {\r\n      id: state.id + 1,\r\n      todo: [\r\n        ...state.todo,\r\n        {\r\n          id: state.id + 1,\r\n          todo: action.todo,\r\n        },\r\n      ],\r\n    };\r\n  } else if (action.type === DEL_TODO) {\r\n    return {\r\n      ...state,\r\n      todo: state.todo.filter((todo) => todo.id !== action.id),\r\n    };\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nconst initialGaolState = {\r\n  goal: [],\r\n  id: 0,\r\n};\r\n\r\nexport const goalReducer = (state = initialGaolState, action) => {\r\n  if (action.type === ADD_GOAL) {\r\n    return {\r\n      id: state.id + 1,\r\n      goal: [\r\n        ...state.goal,\r\n        {\r\n          id: state.id + 1,\r\n          goal: action.goal,\r\n        },\r\n      ],\r\n    };\r\n  } else if (action.type === DEL_GOAL) {\r\n    return {\r\n      ...state,\r\n      goal: state.goal.filter((goal) => goal.id !== action.id),\r\n    };\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nexport const rootReducer = combineReducers({\r\n  Todo: todoReducer,\r\n  Goal: goalReducer,\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { rootReducer } from \"./Reudx/reducer\";\nimport logger from \"redux-logger\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(logger))\n);\nconsole.log(store.getState());\nstore.subscribe(() => console.log(\"state changed\", store.getState()));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}